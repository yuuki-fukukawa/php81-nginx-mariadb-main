import{createServer as u}from"http";import*as c from"process";import a from"node:cluster";import{availableParallelism as d}from"node:os";var g=o=>new Promise((r,n)=>{let s="";o.on("data",t=>s+=t),o.on("end",()=>r(s)),o.on("error",t=>n(t))}),P=(o,r)=>{let n=typeof r=="number"?r:r?.port??13714,s=typeof r=="object"&&r?.cluster!==void 0?r.cluster:!1,t=e=>{console.log(s&&!a.isPrimary?`[${a.worker?.id??"N/A"} / ${a.worker?.process?.pid??"N/A"}] ${e}`:e)};if(s&&a.isPrimary){t("Primary Inertia SSR server process started...");for(let e=0;e<d();e++)a.fork();return}let p={"/health":async()=>({status:"OK",timestamp:Date.now()}),"/shutdown":()=>c.exit(),"/render":async e=>o(JSON.parse(await g(e))),"/404":async()=>({status:"NOT_FOUND",timestamp:Date.now()})};u(async(e,i)=>{let l=p[e.url]||p["/404"];try{i.writeHead(200,{"Content-Type":"application/json",Server:"Inertia.js SSR"}),i.write(JSON.stringify(await l(e)))}catch(m){console.error(m)}i.end()}).listen(n,()=>t("Inertia SSR server started.")),t(`Starting SSR server on port ${n}...`)};export{P as default};
//# sourceMappingURL=server.esm.js.map
