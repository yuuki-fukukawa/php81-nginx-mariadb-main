{
  "version": 3,
  "sources": ["../src/index.ts", "../src/createInertiaApp.ts", "../src/App.ts", "../src/HeadContext.ts", "../src/PageContext.ts", "../src/Deferred.ts", "../src/usePage.ts", "../src/Head.ts", "../src/Link.ts", "../src/useForm.ts", "../src/useRemember.ts", "../src/usePoll.ts", "../src/usePrefetch.ts", "../src/WhenVisible.ts"],
  "sourcesContent": ["import { router as Router } from '@inertiajs/core'\n\nexport const router = Router\nexport { default as createInertiaApp } from './createInertiaApp'\nexport { default as Deferred } from './Deferred'\nexport { default as Head } from './Head'\nexport { InertiaLinkProps, default as Link } from './Link'\nexport { InertiaFormProps, SetDataByObject, SetDataByMethod, SetDataByKeyValuePair, SetDataAction, default as useForm } from './useForm'\nexport { default as usePage } from './usePage'\nexport { default as usePoll } from './usePoll'\nexport { default as usePrefetch } from './usePrefetch'\nexport { default as useRemember } from './useRemember'\nexport { default as WhenVisible } from './WhenVisible'\n", "import { Page, PageProps, PageResolver, router, setupProgress } from '@inertiajs/core'\nimport { ComponentType, FunctionComponent, Key, ReactElement, ReactNode, createElement } from 'react'\nimport { renderToString } from 'react-dom/server'\nimport App from './App'\n\ntype ReactInstance = ReactElement\ntype ReactComponent = ReactNode\n\ntype HeadManagerOnUpdate = (elements: string[]) => void // TODO: When shipped, replace with: Inertia.HeadManagerOnUpdate\ntype HeadManagerTitleCallback = (title: string) => string // TODO: When shipped, replace with: Inertia.HeadManagerTitleCallback\n\ntype AppType<SharedProps extends PageProps = PageProps> = FunctionComponent<\n  {\n    children?: (props: { Component: ComponentType; key: Key; props: Page<SharedProps>['props'] }) => ReactNode\n  } & SetupOptions<unknown, SharedProps>['props']\n>\n\nexport type SetupOptions<ElementType, SharedProps extends PageProps> = {\n  el: ElementType\n  App: AppType\n  props: {\n    initialPage: Page<SharedProps>\n    initialComponent: ReactComponent\n    resolveComponent: PageResolver\n    titleCallback?: HeadManagerTitleCallback\n    onHeadUpdate?: HeadManagerOnUpdate\n  }\n}\n\ntype BaseInertiaAppOptions = {\n  title?: HeadManagerTitleCallback\n  resolve: PageResolver\n}\n\ntype CreateInertiaAppSetupReturnType = ReactInstance | void\ntype InertiaAppOptionsForCSR<SharedProps extends PageProps> = BaseInertiaAppOptions & {\n  id?: string\n  page?: Page | string\n  render?: undefined\n  progress?:\n    | false\n    | {\n        delay?: number\n        color?: string\n        includeCSS?: boolean\n        showSpinner?: boolean\n      }\n  setup(options: SetupOptions<HTMLElement, SharedProps>): CreateInertiaAppSetupReturnType\n}\n\ntype CreateInertiaAppSSRContent = { head: string[]; body: string }\ntype InertiaAppOptionsForSSR<SharedProps extends PageProps> = BaseInertiaAppOptions & {\n  id?: undefined\n  page: Page | string\n  render: typeof renderToString\n  progress?: undefined\n  setup(options: SetupOptions<null, SharedProps>): ReactInstance\n}\n\nexport default async function createInertiaApp<SharedProps extends PageProps = PageProps>(\n  options: InertiaAppOptionsForCSR<SharedProps>,\n): Promise<CreateInertiaAppSetupReturnType>\nexport default async function createInertiaApp<SharedProps extends PageProps = PageProps>(\n  options: InertiaAppOptionsForSSR<SharedProps>,\n): Promise<CreateInertiaAppSSRContent>\nexport default async function createInertiaApp<SharedProps extends PageProps = PageProps>({\n  id = 'app',\n  resolve,\n  setup,\n  title,\n  progress = {},\n  page,\n  render,\n}: InertiaAppOptionsForCSR<SharedProps> | InertiaAppOptionsForSSR<SharedProps>): Promise<\n  CreateInertiaAppSetupReturnType | CreateInertiaAppSSRContent\n> {\n  const isServer = typeof window === 'undefined'\n  const el = isServer ? null : document.getElementById(id)\n  const initialPage = page || JSON.parse(el.dataset.page)\n  // @ts-expect-error\n  const resolveComponent = (name) => Promise.resolve(resolve(name)).then((module) => module.default || module)\n\n  let head = []\n\n  const reactApp = await Promise.all([\n    resolveComponent(initialPage.component),\n    router.decryptHistory().catch(() => {}),\n  ]).then(([initialComponent]) => {\n    return setup({\n      // @ts-expect-error\n      el,\n      App,\n      props: {\n        initialPage,\n        initialComponent,\n        resolveComponent,\n        titleCallback: title,\n        onHeadUpdate: isServer ? (elements) => (head = elements) : null,\n      },\n    })\n  })\n\n  if (!isServer && progress) {\n    setupProgress(progress)\n  }\n\n  if (isServer) {\n    const body = await render(\n      createElement(\n        'div',\n        {\n          id,\n          'data-page': JSON.stringify(initialPage),\n        },\n        // @ts-expect-error\n        reactApp,\n      ),\n    )\n\n    return { head, body }\n  }\n}\n", "import { createHeadManager, PageHandler, router } from '@inertiajs/core'\nimport { createElement, useEffect, useMemo, useState } from 'react'\nimport HeadContext from './HeadContext'\nimport PageContext from './PageContext'\n\nlet currentIsInitialPage = true\nlet routerIsInitialized = false\nlet swapComponent: PageHandler = async () => {\n  // Dummy function so we can init the router outside of the useEffect hook. This is\n  // needed so `router.reload()` works right away (on mount) in any of the user's\n  // components. We swap in the real function in the useEffect hook below.\n  currentIsInitialPage = false\n}\n\nexport default function App({\n  children,\n  initialPage,\n  initialComponent,\n  resolveComponent,\n  titleCallback,\n  onHeadUpdate,\n}) {\n  const [current, setCurrent] = useState({\n    component: initialComponent || null,\n    page: initialPage,\n    key: null,\n  })\n\n  const headManager = useMemo(() => {\n    return createHeadManager(\n      typeof window === 'undefined',\n      titleCallback || ((title) => title),\n      onHeadUpdate || (() => {}),\n    )\n  }, [])\n\n  if (!routerIsInitialized) {\n    router.init({\n      initialPage,\n      resolveComponent,\n      swapComponent: async (args) => swapComponent(args),\n    })\n\n    routerIsInitialized = true\n  }\n\n  useEffect(() => {\n    swapComponent = async ({ component, page, preserveState }) => {\n      if (currentIsInitialPage) {\n        // We block setting the current page on the initial page to\n        // prevent the initial page from being re-rendered again.\n        currentIsInitialPage = false\n        return\n      }\n\n      setCurrent((current) => ({\n        component,\n        page,\n        key: preserveState ? current.key : Date.now(),\n      }))\n    }\n\n    router.on('navigate', () => headManager.forceUpdate())\n  }, [])\n\n  if (!current.component) {\n    return createElement(\n      HeadContext.Provider,\n      { value: headManager },\n      createElement(PageContext.Provider, { value: current.page }, null),\n    )\n  }\n\n  const renderChildren =\n    children ||\n    (({ Component, props, key }) => {\n      const child = createElement(Component, { key, ...props })\n\n      if (typeof Component.layout === 'function') {\n        return Component.layout(child)\n      }\n\n      if (Array.isArray(Component.layout)) {\n        return Component.layout\n          .concat(child)\n          .reverse()\n          .reduce((children, Layout) => createElement(Layout, { children, ...props }))\n      }\n\n      return child\n    })\n\n  return createElement(\n    HeadContext.Provider,\n    { value: headManager },\n    createElement(\n      PageContext.Provider,\n      { value: current.page },\n      renderChildren({\n        Component: current.component,\n        key: current.key,\n        props: current.page.props,\n      }),\n    ),\n  )\n}\n\nApp.displayName = 'Inertia'\n", "import { createContext } from 'react'\n\nconst headContext = createContext(undefined)\nheadContext.displayName = 'InertiaHeadContext'\n\nexport default headContext\n", "import { createContext } from 'react'\n\nconst pageContext = createContext(undefined)\npageContext.displayName = 'InertiaPageContext'\n\nexport default pageContext\n", "import { ReactElement, useEffect, useMemo, useState } from 'react'\nimport { router } from '.'\nimport usePage from './usePage'\n\nconst urlWithoutHash = (url: URL | Location): URL => {\n  url = new URL(url.href)\n  url.hash = ''\n\n  return url\n}\n\nconst isSameUrlWithoutHash = (url1: URL | Location, url2: URL | Location): boolean => {\n  return urlWithoutHash(url1).href === urlWithoutHash(url2).href\n}\n\ninterface DeferredProps {\n  children: ReactElement | number | string\n  fallback: ReactElement | number | string\n  data: string | string[]\n}\n\nconst Deferred = ({ children, data, fallback }: DeferredProps) => {\n  if (!data) {\n    throw new Error('`<Deferred>` requires a `data` prop to be a string or array of strings')\n  }\n\n  const [loaded, setLoaded] = useState(false)\n  const pageProps = usePage().props\n  const keys = useMemo(() => (Array.isArray(data) ? data : [data]), [data])\n\n  useEffect(() => {\n    const removeListener = router.on('start', (e) => {\n      const isPartialVisit = e.detail.visit.only.length > 0 || e.detail.visit.except.length > 0\n      const isReloadingKey = e.detail.visit.only.find((key) => keys.includes(key))\n\n      if (isSameUrlWithoutHash(e.detail.visit.url, window.location) && (!isPartialVisit || isReloadingKey)) {\n        setLoaded(false)\n      }\n    })\n\n    return () => {\n      removeListener()\n    }\n  }, [])\n\n  useEffect(() => {\n    setLoaded(keys.every((key) => pageProps[key] !== undefined))\n  }, [pageProps, keys])\n\n  return loaded ? children : fallback\n}\n\nDeferred.displayName = 'InertiaDeferred'\n\nexport default Deferred\n", "import { Page, PageProps } from '@inertiajs/core'\nimport { useContext } from 'react'\nimport PageContext from './PageContext'\n\nexport default function usePage<TPageProps extends PageProps = PageProps>(): Page<TPageProps> {\n  const page = useContext(PageContext)\n\n  if (!page) {\n    throw new Error('usePage must be used within the Inertia component')\n  }\n\n  return page\n}\n", "import React, { FunctionComponent, useContext, useEffect, useMemo } from 'react'\nimport HeadContext from './HeadContext'\n\ntype InertiaHeadProps = {\n  title?: string\n  children?: React.ReactNode\n}\n\ntype InertiaHead = FunctionComponent<InertiaHeadProps>\n\nconst Head: InertiaHead = function ({ children, title }) {\n  const headManager = useContext(HeadContext)\n  const provider = useMemo(() => headManager.createProvider(), [headManager])\n  const isServer = typeof window === 'undefined'\n\n  useEffect(() => {\n    provider.reconnect()\n    provider.update(renderNodes(children))\n    return () => {\n      provider.disconnect()\n    }\n  }, [provider, children, title])\n\n  function isUnaryTag(node) {\n    return (\n      [\n        'area',\n        'base',\n        'br',\n        'col',\n        'embed',\n        'hr',\n        'img',\n        'input',\n        'keygen',\n        'link',\n        'meta',\n        'param',\n        'source',\n        'track',\n        'wbr',\n      ].indexOf(node.type) > -1\n    )\n  }\n\n  function renderTagStart(node) {\n    const attrs = Object.keys(node.props).reduce((carry, name) => {\n      if (['head-key', 'children', 'dangerouslySetInnerHTML'].includes(name)) {\n        return carry\n      }\n      const value = node.props[name]\n      if (value === '') {\n        return carry + ` ${name}`\n      } else {\n        return carry + ` ${name}=\"${value}\"`\n      }\n    }, '')\n    return `<${node.type}${attrs}>`\n  }\n\n  function renderTagChildren(node) {\n    return typeof node.props.children === 'string'\n      ? node.props.children\n      : node.props.children.reduce((html, child) => html + renderTag(child), '')\n  }\n\n  function renderTag(node) {\n    let html = renderTagStart(node)\n    if (node.props.children) {\n      html += renderTagChildren(node)\n    }\n    if (node.props.dangerouslySetInnerHTML) {\n      html += node.props.dangerouslySetInnerHTML.__html\n    }\n    if (!isUnaryTag(node)) {\n      html += `</${node.type}>`\n    }\n    return html\n  }\n\n  function ensureNodeHasInertiaProp(node) {\n    return React.cloneElement(node, {\n      inertia: node.props['head-key'] !== undefined ? node.props['head-key'] : '',\n    })\n  }\n\n  function renderNode(node) {\n    return renderTag(ensureNodeHasInertiaProp(node))\n  }\n\n  function renderNodes(nodes) {\n    const computed = React.Children.toArray(nodes)\n      .filter((node) => node)\n      .map((node) => renderNode(node))\n    if (title && !computed.find((tag) => tag.startsWith('<title'))) {\n      computed.push(`<title inertia>${title}</title>`)\n    }\n    return computed\n  }\n\n  if (isServer) {\n    provider.update(renderNodes(children))\n  }\n\n  return null\n}\nexport default Head\n", "import {\n  FormDataConvertible,\n  LinkPrefetchOption,\n  mergeDataIntoQueryString,\n  Method,\n  PendingVisit,\n  PreserveStateOption,\n  Progress,\n  router,\n  shouldIntercept,\n} from '@inertiajs/core'\nimport { createElement, forwardRef, useEffect, useMemo, useRef, useState } from 'react'\n\nconst noop = () => undefined\n\ninterface BaseInertiaLinkProps {\n  as?: string\n  data?: Record<string, FormDataConvertible>\n  href: string | { url: string; method: Method }\n  method?: Method\n  headers?: Record<string, string>\n  onClick?: (event: React.MouseEvent<Element>) => void\n  preserveScroll?: PreserveStateOption\n  preserveState?: PreserveStateOption\n  replace?: boolean\n  only?: string[]\n  except?: string[]\n  onCancelToken?: (cancelToken: import('axios').CancelTokenSource) => void\n  onBefore?: () => void\n  onStart?: (event: PendingVisit) => void\n  onProgress?: (progress: Progress) => void\n  onFinish?: (event: PendingVisit) => void\n  onCancel?: () => void\n  onSuccess?: () => void\n  onError?: () => void\n  queryStringArrayFormat?: 'indices' | 'brackets'\n  async?: boolean\n  cacheFor?: number | string\n  prefetch?: boolean | LinkPrefetchOption | LinkPrefetchOption[]\n}\n\nexport type InertiaLinkProps = BaseInertiaLinkProps &\n  Omit<React.HTMLAttributes<HTMLElement>, keyof BaseInertiaLinkProps> &\n  Omit<React.AllHTMLAttributes<HTMLElement>, keyof BaseInertiaLinkProps>\n\nconst Link = forwardRef<unknown, InertiaLinkProps>(\n  (\n    {\n      children,\n      as = 'a',\n      data = {},\n      href,\n      method = 'get',\n      preserveScroll = false,\n      preserveState = null,\n      replace = false,\n      only = [],\n      except = [],\n      headers = {},\n      queryStringArrayFormat = 'brackets',\n      async = false,\n      onClick = noop,\n      onCancelToken = noop,\n      onBefore = noop,\n      onStart = noop,\n      onProgress = noop,\n      onFinish = noop,\n      onCancel = noop,\n      onSuccess = noop,\n      onError = noop,\n      prefetch = false,\n      cacheFor = 0,\n      ...props\n    },\n    ref,\n  ) => {\n    const [inFlightCount, setInFlightCount] = useState(0)\n    const hoverTimeout = useRef<number>(null)\n\n    as = as.toLowerCase()\n    method = typeof href === 'object' ? href.method : (method.toLowerCase() as Method)\n    const [_href, _data] = mergeDataIntoQueryString(\n      method,\n      typeof href === 'object' ? href.url : href || '',\n      data,\n      queryStringArrayFormat,\n    )\n    const url = _href\n    data = _data\n\n    const baseParams = {\n      data,\n      method,\n      preserveScroll,\n      preserveState: preserveState ?? method !== 'get',\n      replace,\n      only,\n      except,\n      headers,\n      async,\n    }\n\n    const visitParams = {\n      ...baseParams,\n      onCancelToken,\n      onBefore,\n      onStart(event) {\n        setInFlightCount((count) => count + 1)\n        onStart(event)\n      },\n      onProgress,\n      onFinish(event) {\n        setInFlightCount((count) => count - 1)\n        onFinish(event)\n      },\n      onCancel,\n      onSuccess,\n      onError,\n    }\n\n    const doPrefetch = () => {\n      router.prefetch(url, baseParams, { cacheFor: cacheForValue })\n    }\n\n    const prefetchModes: LinkPrefetchOption[] = useMemo(\n      () => {\n        if (prefetch === true) {\n          return ['hover']\n        }\n\n        if (prefetch === false) {\n          return []\n        }\n\n        if (Array.isArray(prefetch)) {\n          return prefetch\n        }\n\n        return [prefetch]\n      },\n      Array.isArray(prefetch) ? prefetch : [prefetch],\n    )\n\n    const cacheForValue = useMemo(() => {\n      if (cacheFor !== 0) {\n        // If they've provided a value, respect it\n        return cacheFor\n      }\n\n      if (prefetchModes.length === 1 && prefetchModes[0] === 'click') {\n        // If they've only provided a prefetch mode of 'click',\n        // we should only prefetch for the next request but not keep it around\n        return 0\n      }\n\n      // Otherwise, default to 30 seconds\n      return 30_000\n    }, [cacheFor, prefetchModes])\n\n    useEffect(() => {\n      return () => {\n        clearTimeout(hoverTimeout.current)\n      }\n    }, [])\n\n    useEffect(() => {\n      if (prefetchModes.includes('mount')) {\n        setTimeout(() => doPrefetch())\n      }\n    }, prefetchModes)\n\n    const regularEvents = {\n      onClick: (event) => {\n        onClick(event)\n\n        if (shouldIntercept(event)) {\n          event.preventDefault()\n\n          router.visit(url, visitParams)\n        }\n      },\n    }\n\n    const prefetchHoverEvents = {\n      onMouseEnter: () => {\n        hoverTimeout.current = window.setTimeout(() => {\n          doPrefetch()\n        }, 75)\n      },\n      onMouseLeave: () => {\n        clearTimeout(hoverTimeout.current)\n      },\n      onClick: regularEvents.onClick,\n    }\n\n    const prefetchClickEvents = {\n      onMouseDown: (event) => {\n        if (shouldIntercept(event)) {\n          event.preventDefault()\n          doPrefetch()\n        }\n      },\n      onMouseUp: (event) => {\n        event.preventDefault()\n        router.visit(url, visitParams)\n      },\n      onClick: (event) => {\n        onClick(event)\n\n        if (shouldIntercept(event)) {\n          // Let the mouseup event handle the visit\n          event.preventDefault()\n        }\n      },\n    }\n\n    if (method !== 'get') {\n      as = 'button'\n    }\n\n    const elProps = {\n      a: { href: url },\n      button: { type: 'button' },\n    }\n\n    return createElement(\n      as,\n      {\n        ...props,\n        ...(elProps[as] || {}),\n        ref,\n        ...(() => {\n          if (prefetchModes.includes('hover')) {\n            return prefetchHoverEvents\n          }\n\n          if (prefetchModes.includes('click')) {\n            return prefetchClickEvents\n          }\n\n          return regularEvents\n        })(),\n        'data-loading': inFlightCount > 0 ? '' : undefined,\n      },\n      children,\n    )\n  },\n)\nLink.displayName = 'InertiaLink'\n\nexport default Link\n", "import {\n  FormDataConvertible,\n  FormDataKeys,\n  FormDataValues,\n  Method,\n  Progress,\n  router,\n  VisitOptions,\n} from '@inertiajs/core'\nimport { cloneDeep, isEqual } from 'es-toolkit'\nimport { get, has, set } from 'es-toolkit/compat'\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport useRemember from './useRemember'\n\nexport type SetDataByObject<TForm> = (data: TForm) => void\nexport type SetDataByMethod<TForm> = (data: (previousData: TForm) => TForm) => void\nexport type SetDataByKeyValuePair<TForm extends Record<any, any>> = <K extends FormDataKeys<TForm>>(key: K, value: FormDataValues<TForm, K>) => void\nexport type SetDataAction<TForm extends Record<any, any>> = SetDataByObject<TForm> & SetDataByMethod<TForm> & SetDataByKeyValuePair<TForm>\n\ntype FormDataType = Record<string, FormDataConvertible>\ntype FormOptions = Omit<VisitOptions, 'data'>\n\nexport interface InertiaFormProps<TForm extends FormDataType> {\n  data: TForm\n  isDirty: boolean\n  errors: Partial<Record<FormDataKeys<TForm>, string>>\n  hasErrors: boolean\n  processing: boolean\n  progress: Progress | null\n  wasSuccessful: boolean\n  recentlySuccessful: boolean\n  setData: SetDataAction<TForm>\n  transform: (callback: (data: TForm) => object) => void\n  setDefaults(): void\n  setDefaults(field: FormDataKeys<TForm>, value: FormDataConvertible): void\n  setDefaults(fields: Partial<TForm>): void\n  reset: (...fields: FormDataKeys<TForm>[]) => void\n  clearErrors: (...fields: FormDataKeys<TForm>[]) => void\n  setError(field: FormDataKeys<TForm>, value: string): void\n  setError(errors: Record<FormDataKeys<TForm>, string>): void\n  submit: (...args: [Method, string, FormOptions?] | [{ url: string; method: Method }, FormOptions?]) => void\n  get: (url: string, options?: FormOptions) => void\n  patch: (url: string, options?: FormOptions) => void\n  post: (url: string, options?: FormOptions) => void\n  put: (url: string, options?: FormOptions) => void\n  delete: (url: string, options?: FormOptions) => void\n  cancel: () => void\n}\nexport default function useForm<TForm extends FormDataType>(initialValues?: TForm): InertiaFormProps<TForm>\nexport default function useForm<TForm extends FormDataType>(\n  rememberKey: string,\n  initialValues?: TForm,\n): InertiaFormProps<TForm>\nexport default function useForm<TForm extends FormDataType>(\n  rememberKeyOrInitialValues?: string | TForm,\n  maybeInitialValues?: TForm,\n): InertiaFormProps<TForm> {\n  const isMounted = useRef(null)\n  const rememberKey = typeof rememberKeyOrInitialValues === 'string' ? rememberKeyOrInitialValues : null\n  const [defaults, setDefaults] = useState(\n    (typeof rememberKeyOrInitialValues === 'string' ? maybeInitialValues : rememberKeyOrInitialValues) || ({} as TForm),\n  )\n  const cancelToken = useRef(null)\n  const recentlySuccessfulTimeoutId = useRef(null)\n  const [data, setData] = rememberKey ? useRemember(defaults, `${rememberKey}:data`) : useState(defaults)\n  const [errors, setErrors] = rememberKey\n    ? useRemember({} as Partial<Record<FormDataKeys<TForm>, string>>, `${rememberKey}:errors`)\n    : useState({} as Partial<Record<FormDataKeys<TForm>, string>>)\n  const [hasErrors, setHasErrors] = useState(false)\n  const [processing, setProcessing] = useState(false)\n  const [progress, setProgress] = useState(null)\n  const [wasSuccessful, setWasSuccessful] = useState(false)\n  const [recentlySuccessful, setRecentlySuccessful] = useState(false)\n  const transform = useRef((data) => data)\n  const isDirty = useMemo(() => !isEqual(data, defaults), [data, defaults])\n\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n\n  const submit = useCallback(\n    (...args) => {\n      const objectPassed = typeof args[0] === 'object'\n\n      const method = objectPassed ? args[0].method : args[0]\n      const url = objectPassed ? args[0].url : args[1]\n      const options = (objectPassed ? args[1] : args[2]) ?? {}\n\n      const _options = {\n        ...options,\n        onCancelToken: (token) => {\n          cancelToken.current = token\n\n          if (options.onCancelToken) {\n            return options.onCancelToken(token)\n          }\n        },\n        onBefore: (visit) => {\n          setWasSuccessful(false)\n          setRecentlySuccessful(false)\n          clearTimeout(recentlySuccessfulTimeoutId.current)\n\n          if (options.onBefore) {\n            return options.onBefore(visit)\n          }\n        },\n        onStart: (visit) => {\n          setProcessing(true)\n\n          if (options.onStart) {\n            return options.onStart(visit)\n          }\n        },\n        onProgress: (event) => {\n          setProgress(event)\n\n          if (options.onProgress) {\n            return options.onProgress(event)\n          }\n        },\n        onSuccess: (page) => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n            setErrors({})\n            setHasErrors(false)\n            setWasSuccessful(true)\n            setRecentlySuccessful(true)\n            setDefaults(cloneDeep(data))\n            recentlySuccessfulTimeoutId.current = setTimeout(() => {\n              if (isMounted.current) {\n                setRecentlySuccessful(false)\n              }\n            }, 2000)\n          }\n\n          if (options.onSuccess) {\n            return options.onSuccess(page)\n          }\n        },\n        onError: (errors) => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n            setErrors(errors)\n            setHasErrors(true)\n          }\n\n          if (options.onError) {\n            return options.onError(errors)\n          }\n        },\n        onCancel: () => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n          }\n\n          if (options.onCancel) {\n            return options.onCancel()\n          }\n        },\n        onFinish: (visit) => {\n          if (isMounted.current) {\n            setProcessing(false)\n            setProgress(null)\n          }\n\n          cancelToken.current = null\n\n          if (options.onFinish) {\n            return options.onFinish(visit)\n          }\n        },\n      }\n\n      if (method === 'delete') {\n        router.delete(url, { ..._options, data: transform.current(data) })\n      } else {\n        router[method](url, transform.current(data), _options)\n      }\n    },\n    [data, setErrors, transform],\n  )\n\n  const setDataFunction = useCallback(\n    (keyOrData: FormDataKeys<TForm> | Function | TForm, maybeValue?: any) => {\n      if (typeof keyOrData === 'string') {\n        setData((data) => set(cloneDeep(data), keyOrData, maybeValue))\n      } else if (typeof keyOrData === 'function') {\n        setData((data) => keyOrData(data))\n      } else {\n        setData(keyOrData as TForm)\n      }\n    },\n    [setData],\n  )\n\n  const [dataAsDefaults, setDataAsDefaults] = useState(false)\n\n  const setDefaultsFunction = useCallback(\n    (fieldOrFields?: FormDataKeys<TForm> | Partial<TForm>, maybeValue?: FormDataConvertible) => {\n      if (typeof fieldOrFields === 'undefined') {\n        setDefaults(data)\n        // If setData was called right before setDefaults, data was not\n        // updated in that render yet, so we set a flag to update\n        // defaults right after the next render.\n        setDataAsDefaults(true)\n      } else {\n        setDefaults((defaults) => {\n          return typeof fieldOrFields === 'string'\n            ? set(cloneDeep(defaults), fieldOrFields, maybeValue)\n            : Object.assign(cloneDeep(defaults), fieldOrFields)\n        })\n      }\n    },\n    [data, setDefaults],\n  )\n  \n  useLayoutEffect(() => {\n    if (!dataAsDefaults) {\n      return\n    }\n\n    if (isDirty) {\n      // Data has been updated in this next render and is different from\n      // the defaults, so now we can set defaults to the current data.\n      setDefaults(data)\n    }\n\n    setDataAsDefaults(false)\n  }, [dataAsDefaults])\n\n  const reset = useCallback(\n    (...fields) => {\n      if (fields.length === 0) {\n        setData(defaults)\n      } else {\n        setData((data) =>\n          (fields as Array<FormDataKeys<TForm>>)\n            .filter((key) => has(defaults, key))\n            .reduce(\n              (carry, key) => {\n                return set(carry, key, get(defaults, key))\n              },\n              { ...data } as TForm,\n            ),\n        )\n      }\n    },\n    [setData, defaults],\n  )\n\n  const setError = useCallback(\n    (fieldOrFields: FormDataKeys<TForm> | Record<FormDataKeys<TForm>, string>, maybeValue?: string) => {\n      setErrors((errors) => {\n        const newErrors = {\n          ...errors,\n          ...(typeof fieldOrFields === 'string'\n            ? { [fieldOrFields]: maybeValue }\n            : (fieldOrFields as Record<FormDataKeys<TForm>, string>)),\n        }\n        setHasErrors(Object.keys(newErrors).length > 0)\n        return newErrors\n      })\n    },\n    [setErrors, setHasErrors],\n  )\n\n  const clearErrors = useCallback(\n    (...fields) => {\n      setErrors((errors) => {\n        const newErrors = (Object.keys(errors) as Array<FormDataKeys<TForm>>).reduce(\n          (carry, field) => ({\n            ...carry,\n            ...(fields.length > 0 && !fields.includes(field) ? { [field]: errors[field] } : {}),\n          }),\n          {},\n        )\n        setHasErrors(Object.keys(newErrors).length > 0)\n        return newErrors\n      })\n    },\n    [setErrors, setHasErrors],\n  )\n\n  const createSubmitMethod = (method) => (url, options) => {\n    submit(method, url, options)\n  }\n  const getMethod = useCallback(createSubmitMethod('get'), [submit])\n  const post = useCallback(createSubmitMethod('post'), [submit])\n  const put = useCallback(createSubmitMethod('put'), [submit])\n  const patch = useCallback(createSubmitMethod('patch'), [submit])\n  const deleteMethod = useCallback(createSubmitMethod('delete'), [submit])\n\n  const cancel = useCallback(() => {\n    if (cancelToken.current) {\n      cancelToken.current.cancel()\n    }\n  }, [])\n\n  const transformFunction = useCallback((callback) => {\n    transform.current = callback\n  }, [])\n\n  return {\n    data,\n    setData: setDataFunction,\n    isDirty,\n    errors,\n    hasErrors,\n    processing,\n    progress,\n    wasSuccessful,\n    recentlySuccessful,\n    transform: transformFunction,\n    setDefaults: setDefaultsFunction,\n    reset,\n    setError,\n    clearErrors,\n    submit,\n    get: getMethod,\n    post,\n    put,\n    patch,\n    delete: deleteMethod,\n    cancel,\n  }\n}\n", "import { router } from '@inertiajs/core'\nimport { Dispatch, SetStateAction, useEffect, useState } from 'react'\n\nexport default function useRemember<State>(\n  initialState: State,\n  key?: string,\n): [State, Dispatch<SetStateAction<State>>] {\n  const [state, setState] = useState(() => {\n    const restored = router.restore(key) as State\n\n    return restored !== undefined ? restored : initialState\n  })\n\n  useEffect(() => {\n    router.remember(state, key)\n  }, [state, key])\n\n  return [state, setState]\n}\n", "import { PollOptions, ReloadOptions, router } from '@inertiajs/core'\nimport { useEffect, useRef } from 'react'\n\nexport default function usePoll(\n  interval: number,\n  requestOptions: ReloadOptions = {},\n  options: PollOptions = {\n    keepAlive: false,\n    autoStart: true,\n  },\n) {\n  const pollRef = useRef(\n    router.poll(interval, requestOptions, {\n      ...options,\n      autoStart: false,\n    }),\n  )\n\n  useEffect(() => {\n    if (options.autoStart ?? true) {\n      pollRef.current.start()\n    }\n\n    return () => pollRef.current.stop()\n  }, [])\n\n  return {\n    stop: pollRef.current.stop,\n    start: pollRef.current.start,\n  }\n}\n", "import { router, VisitOptions } from '@inertiajs/core'\nimport { useEffect, useState } from 'react'\n\nexport default function usePrefetch(options: VisitOptions = {}): {\n  lastUpdatedAt: number | null\n  isPrefetching: boolean\n  isPrefetched: boolean\n  flush: () => void\n} {\n  const cached = typeof window === 'undefined' ? null : router.getCached(window.location.pathname, options)\n  const inFlight = typeof window === 'undefined' ? null : router.getPrefetching(window.location.pathname, options)\n\n  const [lastUpdatedAt, setLastUpdatedAt] = useState<number | null>(cached?.staleTimestamp || null)\n  const [isPrefetching, setIsPrefetching] = useState(inFlight !== null)\n  const [isPrefetched, setIsPrefetched] = useState(cached !== null)\n\n  useEffect(() => {\n    const onPrefetchingListener = router.on('prefetching', (e) => {\n      if (e.detail.visit.url.pathname === window.location.pathname) {\n        setIsPrefetching(true)\n      }\n    })\n\n    const onPrefetchedListener = router.on('prefetched', (e) => {\n      if (e.detail.visit.url.pathname === window.location.pathname) {\n        setIsPrefetching(false)\n        setIsPrefetched(true)\n        setLastUpdatedAt(e.detail.fetchedAt)\n      }\n    })\n\n    return () => {\n      onPrefetchedListener()\n      onPrefetchingListener()\n    }\n  }, [])\n\n  return {\n    lastUpdatedAt,\n    isPrefetching,\n    isPrefetched,\n    flush: () => router.flush(window.location.pathname, options),\n  }\n}\n", "import { ReloadOptions, router } from '@inertiajs/core'\nimport { createElement, ReactElement, useCallback, useEffect, useRef, useState } from 'react'\n\ninterface WhenVisibleProps {\n  children: ReactElement | number | string\n  fallback: ReactElement | number | string\n  data?: string | string[]\n  params?: ReloadOptions\n  buffer?: number\n  as?: string\n  always?: boolean\n}\n\nconst WhenVisible = ({ children, data, params, buffer, as, always, fallback }: WhenVisibleProps) => {\n  always = always ?? false\n  as = as ?? 'div'\n  fallback = fallback ?? null\n\n  const [loaded, setLoaded] = useState(false)\n  const hasFetched = useRef<boolean>(false)\n  const fetching = useRef<boolean>(false)\n  const ref = useRef<HTMLDivElement>(null)\n\n  const getReloadParams = useCallback<() => Partial<ReloadOptions>>(() => {\n    if (data) {\n      return {\n        only: (Array.isArray(data) ? data : [data]) as string[],\n      }\n    }\n\n    if (!params) {\n      throw new Error('You must provide either a `data` or `params` prop.')\n    }\n\n    return params\n  }, [params, data])\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (!entries[0].isIntersecting) {\n          return\n        }\n\n        if (!always && hasFetched.current) {\n          observer.disconnect()\n        }\n\n        if (fetching.current) {\n          return\n        }\n\n        hasFetched.current = true\n        fetching.current = true\n\n        const reloadParams = getReloadParams()\n\n        router.reload({\n          ...reloadParams,\n          onStart: (e) => {\n            fetching.current = true\n            reloadParams.onStart?.(e)\n          },\n          onFinish: (e) => {\n            setLoaded(true)\n            fetching.current = false\n            reloadParams.onFinish?.(e)\n\n            if (!always) {\n              observer.disconnect()\n            }\n          },\n        })\n      },\n      {\n        rootMargin: `${buffer || 0}px`,\n      },\n    )\n\n    observer.observe(ref.current)\n\n    return () => {\n      observer.disconnect()\n    }\n  }, [ref, getReloadParams, buffer])\n\n  if (always || !loaded) {\n    return createElement(\n      as,\n      {\n        props: null,\n        ref,\n      },\n      loaded ? children : fallback,\n    )\n  }\n\n  return loaded ? children : null\n}\n\nWhenVisible.displayName = 'InertiaWhenVisible'\n\nexport default WhenVisible\n"],
  "mappings": "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",
  "names": ["Router", "router", "setupProgress", "createElement", "createHeadManager", "router", "createElement", "useEffect", "useMemo", "useState", "createContext", "headContext", "HeadContext_default", "createContext", "pageContext", "PageContext_default", "currentIsInitialPage", "routerIsInitialized", "swapComponent", "App", "children", "initialPage", "initialComponent", "resolveComponent", "titleCallback", "onHeadUpdate", "current", "setCurrent", "useState", "headManager", "useMemo", "createHeadManager", "title", "router", "args", "useEffect", "component", "page", "preserveState", "createElement", "HeadContext_default", "PageContext_default", "renderChildren", "Component", "props", "key", "child", "Layout", "createInertiaApp", "id", "resolve", "setup", "title", "progress", "page", "render", "isServer", "el", "initialPage", "resolveComponent", "name", "module", "head", "reactApp", "router", "initialComponent", "App", "elements", "setupProgress", "body", "createElement", "useEffect", "useMemo", "useState", "useContext", "usePage", "page", "useContext", "PageContext_default", "urlWithoutHash", "url", "isSameUrlWithoutHash", "url1", "url2", "Deferred", "children", "data", "fallback", "loaded", "setLoaded", "useState", "pageProps", "usePage", "keys", "useMemo", "useEffect", "removeListener", "router", "e", "isPartialVisit", "isReloadingKey", "key", "Deferred_default", "React", "useContext", "useEffect", "useMemo", "Head", "children", "title", "headManager", "useContext", "HeadContext_default", "provider", "useMemo", "isServer", "useEffect", "renderNodes", "isUnaryTag", "node", "renderTagStart", "attrs", "carry", "name", "value", "renderTagChildren", "html", "child", "renderTag", "ensureNodeHasInertiaProp", "React", "renderNode", "nodes", "computed", "tag", "Head_default", "mergeDataIntoQueryString", "router", "shouldIntercept", "createElement", "forwardRef", "useEffect", "useMemo", "useRef", "useState", "noop", "Link", "children", "as", "data", "href", "method", "preserveScroll", "preserveState", "replace", "only", "except", "headers", "queryStringArrayFormat", "async", "onClick", "onCancelToken", "onBefore", "onStart", "onProgress", "onFinish", "onCancel", "onSuccess", "onError", "prefetch", "cacheFor", "props", "ref", "inFlightCount", "setInFlightCount", "hoverTimeout", "_href", "_data", "url", "baseParams", "visitParams", "event", "count", "doPrefetch", "cacheForValue", "prefetchModes", "regularEvents", "prefetchHoverEvents", "prefetchClickEvents", "Link_default", "router", "cloneDeep", "isEqual", "get", "has", "set", "useCallback", "useEffect", "useLayoutEffect", "useMemo", "useRef", "useState", "router", "useEffect", "useState", "useRemember", "initialState", "key", "state", "setState", "restored", "useForm", "rememberKeyOrInitialValues", "maybeInitialValues", "isMounted", "useRef", "rememberKey", "defaults", "setDefaults", "useState", "cancelToken", "recentlySuccessfulTimeoutId", "data", "setData", "useRemember", "errors", "setErrors", "hasErrors", "setHasErrors", "processing", "setProcessing", "progress", "setProgress", "wasSuccessful", "setWasSuccessful", "recentlySuccessful", "setRecentlySuccessful", "transform", "isDirty", "useMemo", "isEqual", "useEffect", "submit", "useCallback", "args", "objectPassed", "method", "url", "options", "_options", "token", "visit", "event", "page", "cloneDeep", "router", "setDataFunction", "keyOrData", "maybeValue", "set", "dataAsDefaults", "setDataAsDefaults", "setDefaultsFunction", "fieldOrFields", "useLayoutEffect", "reset", "fields", "key", "has", "carry", "get", "setError", "newErrors", "clearErrors", "field", "createSubmitMethod", "getMethod", "post", "put", "patch", "deleteMethod", "cancel", "transformFunction", "callback", "router", "useEffect", "useRef", "usePoll", "interval", "requestOptions", "options", "pollRef", "router", "useEffect", "useState", "usePrefetch", "options", "cached", "inFlight", "lastUpdatedAt", "setLastUpdatedAt", "isPrefetching", "setIsPrefetching", "isPrefetched", "setIsPrefetched", "onPrefetchingListener", "e", "onPrefetchedListener", "router", "createElement", "useCallback", "useEffect", "useRef", "useState", "WhenVisible", "children", "data", "params", "buffer", "as", "always", "fallback", "loaded", "setLoaded", "hasFetched", "fetching", "ref", "getReloadParams", "observer", "entries", "reloadParams", "e", "WhenVisible_default", "router", "Router"]
}
